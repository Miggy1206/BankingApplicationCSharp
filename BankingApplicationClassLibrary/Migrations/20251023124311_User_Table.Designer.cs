// <auto-generated />
using System;
using BankingApplicationClassLibrary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankingApplicationClassLibrary.Migrations
{
    [DbContext(typeof(BankingAppDbContext))]
    [Migration("20251023124311_User_Table")]
    partial class User_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankingApplicationClassLibrary.Account", b =>
                {
                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenedByStaffID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpenedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sortcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.ToTable("Accounts", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BankingApplicationClassLibrary.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WithBankSince")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BankingApplicationClassLibrary.CreditAccount", b =>
                {
                    b.HasBaseType("BankingApplicationClassLibrary.Account");

                    b.Property<string>("AccountNumber16")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CreditInterestRate")
                        .HasColumnType("float");

                    b.Property<double>("CreditLimit")
                        .HasColumnType("float");

                    b.Property<double>("WithdrawalFee")
                        .HasColumnType("float");

                    b.ToTable("CreditCards", (string)null);
                });

            modelBuilder.Entity("BankingApplicationClassLibrary.CurrentAccount", b =>
                {
                    b.HasBaseType("BankingApplicationClassLibrary.Account");

                    b.Property<double>("OverdraftInterestRate")
                        .HasColumnType("float");

                    b.Property<double>("OverdraftLimit")
                        .HasColumnType("float");

                    b.ToTable("CurrentAccounts", (string)null);
                });

            modelBuilder.Entity("BankingApplicationClassLibrary.MortgageAccount", b =>
                {
                    b.HasBaseType("BankingApplicationClassLibrary.Account");

                    b.Property<string>("AccountNumber16")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FixedOverpaymentLimit")
                        .HasColumnType("float");

                    b.Property<double>("FurtherAdvanceCharge")
                        .HasColumnType("float");

                    b.Property<double>("MortgageInterestRate")
                        .HasColumnType("float");

                    b.Property<int>("MortgageTermInYears")
                        .HasColumnType("int");

                    b.Property<int>("MortgageType")
                        .HasColumnType("int");

                    b.Property<DateTime>("RepaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalMortgageAmount")
                        .HasColumnType("float");

                    b.ToTable("Mortgages", (string)null);
                });

            modelBuilder.Entity("BankingApplicationClassLibrary.SavingsAccount", b =>
                {
                    b.HasBaseType("BankingApplicationClassLibrary.Account");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<DateTime>("InterestDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("InterestRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("MaturityDate")
                        .HasColumnType("datetime2");

                    b.ToTable("SavingsAccounts", (string)null);
                });

            modelBuilder.Entity("BankingApplicationClassLibrary.Customer", b =>
                {
                    b.HasBaseType("BankingApplicationClassLibrary.User");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("BankingApplicationClassLibrary.Staff", b =>
                {
                    b.HasBaseType("BankingApplicationClassLibrary.User");

                    b.ToTable("StaffMembers", (string)null);
                });

            modelBuilder.Entity("BankingApplicationClassLibrary.CreditAccount", b =>
                {
                    b.HasOne("BankingApplicationClassLibrary.Account", null)
                        .WithOne()
                        .HasForeignKey("BankingApplicationClassLibrary.CreditAccount", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankingApplicationClassLibrary.CurrentAccount", b =>
                {
                    b.HasOne("BankingApplicationClassLibrary.Account", null)
                        .WithOne()
                        .HasForeignKey("BankingApplicationClassLibrary.CurrentAccount", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankingApplicationClassLibrary.MortgageAccount", b =>
                {
                    b.HasOne("BankingApplicationClassLibrary.Account", null)
                        .WithOne()
                        .HasForeignKey("BankingApplicationClassLibrary.MortgageAccount", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankingApplicationClassLibrary.SavingsAccount", b =>
                {
                    b.HasOne("BankingApplicationClassLibrary.Account", null)
                        .WithOne()
                        .HasForeignKey("BankingApplicationClassLibrary.SavingsAccount", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankingApplicationClassLibrary.Customer", b =>
                {
                    b.HasOne("BankingApplicationClassLibrary.User", null)
                        .WithOne()
                        .HasForeignKey("BankingApplicationClassLibrary.Customer", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankingApplicationClassLibrary.Staff", b =>
                {
                    b.HasOne("BankingApplicationClassLibrary.User", null)
                        .WithOne()
                        .HasForeignKey("BankingApplicationClassLibrary.Staff", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
